version: "3.9"

services:
  postgres:
    image: postgres:16
    restart: always
    # ⚠️ NO declares aquí POSTGRES_DB/USER/PASSWORD.
    # Defínelos en Dokploy -> Service -> Environment del servicio "postgres".
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      backend_net:
        aliases: [postgres]
    healthcheck:
      # Cambiado: sin $$ para que Dokploy pueda inyectar las variables
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -p 5432 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build:
      context: ..
      dockerfile: deploy/backend.Dockerfile
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - path: .env
    # Variables técnicas no sensibles puedes dejarlas aquí.
    environment:
      POSTGRES_HOST: "postgres"
      POSTGRES_PORT: "5432"
      GUNICORN_WORKERS: "3"
      GUNICORN_THREADS: "1"
      GUNICORN_TIMEOUT: "120"
      DB_MAX_RETRIES: "30"
      DB_RETRY_DELAY: "1"
      # ⚠️ NO declares aquí SECRET_KEY / DEBUG / DATABASE_URL / ALLOWED_HOSTS / CSRF_* / CORS_*.
      # Ponlas en Dokploy -> Service -> Environment del servicio "backend".
    networks:
      backend_net:
        aliases: [backend]
    ports:
      - "8001:8000"
    volumes:
      - media:/app/media
    healthcheck:
      # Si tu imagen no tiene curl, instala o cambia el check (ver abajo).
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/admin/login/ || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  pgdata:
    name: pgdata
  media:
    name: backend_media

networks:
  backend_net:
    driver: bridge
