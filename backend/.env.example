# Variables base para ejecutar backendblog con autenticación JWT
# Los orígenes del frontend oficial (GitHub Pages y localhost:5173) ya están permitidos por defecto,
# pero puedes sobreescribirlos con CORS_ALLOWED_ORIGINS si necesitas más dominios.
# Nota: en Dokploy también puedes usar las variantes con prefijo DJANGO_ (por ejemplo DJANGO_DEBUG)
# o las claves heredadas SECRET/URL; la configuración las resolverá automáticamente.

SECRET_KEY=change-me
DEBUG=True
SECURE_SSL_REDIRECT=False
ALLOWED_HOSTS=backendblog.yampi.eu,localhost,127.0.0.1
CSRF_TRUSTED_ORIGINS=https://backendblog.yampi.eu,https://cdryampi.github.io
CORS_ALLOWED_ORIGINS=http://localhost:5173,https://cdryampi.github.io,https://cdryampi.github.io/CodexTest/

# Claves para habilitar el asistente de traducción mediante OpenAI
# Puedes definir OPENAI_API_KEY u OPEN_IA_KEY; este último mantiene la compatibilidad con los despliegues previos.
OPENAI_API_KEY=
OPEN_IA_KEY=
VITE_OPEN_IA_KEY=
OPENAI_API_URL=https://api.openai.com/v1/responses
OPENAI_DEFAULT_MODEL=gpt-4o-mini
OPENAI_REQUEST_TIMEOUT=15
OPENAI_THROTTLE=20/min
OPENAI_MAX_TEXT_LENGTH=2000

# Configuración de email (en desarrollo se usa consola automáticamente)
EMAIL_BACKEND=
EMAIL_HOST=smtp.example.com
EMAIL_PORT=587
EMAIL_HOST_USER=no-reply@example.com
EMAIL_HOST_PASSWORD=change-me
EMAIL_USE_TLS=True
EMAIL_USE_SSL=False
DEFAULT_FROM_EMAIL=CodexTest Blog <no-reply@example.com>

# Alternativa: usa DATABASE_URL si Dokploy/Codex la provee (por ejemplo postgres://user:pass@host:5432/dbname)
# En Dokploy puedes asignarla directamente desde el proyecto: DATABASE_URL=${{project.DATABASE_URL}}
DATABASE_URL=

# Variables PostgreSQL si no se define DATABASE_URL
POSTGRES_DB=backendblog
POSTGRES_USER=backendblog
POSTGRES_PASSWORD=change-me
POSTGRES_HOST=postgres
POSTGRES_PORT=5432

# Opcional: configuración de Gunicorn
GUNICORN_WORKERS=3
GUNICORN_THREADS=1
GUNICORN_TIMEOUT=120

# Opcional: reintentos antes de conectar con la base de datos
DB_MAX_RETRIES=30
DB_RETRY_DELAY=1
